[{"/home/parspooyesh/divar/divar-widget/src/index.js":"1","/home/parspooyesh/divar/divar-widget/src/App.js":"2","/home/parspooyesh/divar/divar-widget/src/reportWebVitals.js":"3","/home/parspooyesh/divar/divar-widget/src/Containers/widget/widget.js":"4","/home/parspooyesh/divar/divar-widget/src/Components/modal/modalContent.js":"5","/home/parspooyesh/divar/divar-widget/src/Components/modal/modal.js":"6"},{"size":650,"mtime":1607240301726,"results":"7","hashOfConfig":"8"},{"size":561,"mtime":1607240300106,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":1607232796504,"results":"10","hashOfConfig":"8"},{"size":4137,"mtime":1607169464220,"results":"11","hashOfConfig":"8"},{"size":1957,"mtime":1607169464216,"results":"12","hashOfConfig":"8"},{"size":7993,"mtime":1607169464216,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1ge82ww",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"16"},"/home/parspooyesh/divar/divar-widget/src/index.js",[],["30","31"],"/home/parspooyesh/divar/divar-widget/src/App.js",[],"/home/parspooyesh/divar/divar-widget/src/reportWebVitals.js",[],"/home/parspooyesh/divar/divar-widget/src/Containers/widget/widget.js",["32"],"\n// import logo from './logo.svg';\nimport React, { useState, useEffect } from 'react';\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch,\n  useRouteMatch,\n} from 'react-router-dom'\nimport Axios from 'axios';\nimport { Container, Row, Col, ListGroup, ProgressBar } from 'react-bootstrap';\nimport { FaAngleLeft } from 'react-icons/fa';\nimport Modal from '../../Components/modal/modal'\nimport ModalContent from '../../Components/modal/modalContent'\n\nimport 'bootstrap-v4-rtl/dist/css/bootstrap-rtl.min.css';\nimport styles from './widget.module.css';\n\nfunction Widget() {\n\n  const [widgetItems, setWidgetItems] = useState([])\n  const [loading, setLoading] = useState('')\n  const [modalShow, setModalShow] = useState(false)\n  const [modalData, setModalData] = useState(null)\n\n  useEffect(() => {\n    setLoading('Loading...!')\n    Axios.get('/api/v1/widgets/actions')\n      .then(response => {\n        const resItems = response.data\n        console.log(resItems)\n        setWidgetItems(resItems)\n        setLoading('')\n      })\n      .catch(error => {\n        console.log(error)\n        setLoading('')\n      })\n  }, [])\n\n  const actionDispacher = (data) => {\n    setModalData(data)\n    handleOpen()\n  }\n\n  const handleOpen = () => {\n    setModalShow(true)\n  }\n  const hanldeClose = () => {\n    setModalShow(false)\n  }\n\n  let { path  } = useRouteMatch();\n\n  return (\n    <Router>\n      <Container>\n        <Switch>\n          <Route path={`${path}/:widgetSlug`} component={ModalContent} />\n\n          <Route exact path={path}>\n            <div className=\"rtl\" >\n              {modalShow && <Modal data={modalData} closeModal={hanldeClose} />}\n              {loading}\n\n              <ListGroup variant=\"flush\">\n                {widgetItems.map((item, i) => {\n                  let classItem = item.data && item.data.has_divider ? styles.borderBottom : 'border-0'\n                  if (item.widget_type === 'TITLE_ROW') {\n                    const { data } = item\n                    return <Row key={i} >\n                      <Col xs={12} className='pt-3 pb-4'>\n                        <p>{data.text}</p>\n                      </Col>\n                    </Row>\n                  } else if (item.widget_type === 'UNEXPANDABLE_ROW') {\n                    const { data } = item\n                    return <Row key={i}>\n                      <Col className=\"d-flex justify-content-start\">\n                        <p style={{ color: '#737373' }}>{data.title}</p>\n                      </Col>\n                      <Col className=\"d-flex justify-content-end\">\n                        <p>{data.value}</p>\n                      </Col>\n                    </Row>\n                  } else if (item.widget_type === 'SECTION_DIVIDER_ROW') {\n                    return <Row key={i}>\n                      <Col sm={12} className={[\"align-self-center pt-3\", styles.dividerRow].join(' ')}></Col>\n                    </Row>\n                  } else {\n                    const { data } = item\n                    const progressColor = data.score_color === 'SUCCESS_PRIMARY' ? \"success\" : \"warning\"\n                    return <ListGroup.Item action key={i} className={classItem} onClick={() => actionDispacher(data)}>\n                      <Row className=\"align-items-center\">\n                        <Col md={8} xs={6} className=\"justify-content-start\">\n                          <img className={styles.widget_img} src={data.icon.image_url_light} alt={data.icon.icon_name} />\n                          <a className={styles.paragraph}> {data.title}</a>\n                        </Col>\n                        <Col md={3} xs={4} className=\"justify-content-between\">\n                          <ProgressBar variant={progressColor} now={data.percentage_score} />\n                        </Col>\n                        <Col md={1} xs={1}>\n                          <FaAngleLeft />\n                        </Col>\n                      </Row>\n                    </ListGroup.Item>\n                  }\n                })}\n              </ListGroup>\n            </div>\n          </Route>\n        </Switch>\n      </Container>\n    </Router>\n  );\n}\n\nexport default Widget;\n","/home/parspooyesh/divar/divar-widget/src/Components/modal/modalContent.js",["33","34"],"import React from 'react'\nimport {\n  useLocation,\n  useHistory\n} from 'react-router-dom'\nimport { Row, Col, ListGroup , OverlayTrigger , Tooltip} from 'react-bootstrap';\nimport { FaArrowAltCircleLeft } from 'react-icons/fa';\n\nimport 'bootstrap-v4-rtl/dist/css/bootstrap-rtl.min.css';\nimport styles from '../../Containers/widget/widget.module.css';\nimport MCStyles from './modalContent.module.css'\nconst ModalContent = () => {\n  const location = useLocation();\n  const history = useHistory()\n  let widget_data = location.state.widgetData\n\n  const goBackHandler = () => {\n    history.goBack()\n  }\n  return (\n    <div className=\"rtl\" >\n      <ListGroup variant=\"flush\">\n        {widget_data.map((item, i) => {\n          const { data } = item\n          if (item.widget_type === 'LEGEND_TITLE_ROW') {\n            return <Row key={i} className='pt-3 pb-4'>\n              <Col sm={9} >\n                <h4>{data.title}</h4>\n              </Col>\n              <Col sm={3} className=\"d-flex justify-content-end\">\n                <OverlayTrigger \n                overlay={<Tooltip>Go To Modal</Tooltip>}\n                placement ='bottom'>\n                  <span className=\"d-inline-block\">\n                  <FaArrowAltCircleLeft size={30} className={MCStyles.goBack_btn} onClick={goBackHandler} />\n                  </span>\n                </OverlayTrigger>\n              </Col>\n            </Row>\n          } else if (item.widget_type === 'FEATURE_ROW') {\n            return <ListGroup.Item key={i} >\n              <Row className=\"align-items-center\">\n                <Col sm={12} className=\"justify-content-start\">\n                  <img className={styles.widget_img} src={data.icon.image_url_light} alt={data.icon.icon_name} />\n                  <a className={styles.paragraph}> {data.title}</a>\n                </Col>\n\n              </Row>\n            </ListGroup.Item>\n          }\n        })}\n      </ListGroup>\n    </div>\n  );\n}\n\nexport default ModalContent","/home/parspooyesh/divar/divar-widget/src/Components/modal/modal.js",["35","36","37","38"],"import React, { useState } from 'react';\nimport {\n    Link,\n    useRouteMatch,\n} from 'react-router-dom'\n\nimport PropTypes from 'prop-types';\nimport { Row, Col, Modal, Button, ListGroup, Carousel } from 'react-bootstrap'\nimport { FaAngleLeft } from 'react-icons/fa';\n\nimport 'bootstrap-v4-rtl/dist/css/bootstrap-rtl.min.css';\nimport styles from './modal.module.css'\nimport widgetStyles from '../../Containers/widget/widget.module.css'\n// import ModalContent from './modalContent';\n\nconst WidgetModal = (props) => {\n\n    const { data, closeModal } = props\n    const [show, setShow] = useState(true);\n\n    const handleClose = () => {\n        setShow(false)\n        closeModal()\n    };\n   \n    const modalClass = styles.modal_container\n\n    let { url } = useRouteMatch();\n\n    return (\n        <Modal size=\"lg\" className={[modalClass, 'rtl'].join(' ')} show={show} onHide={handleClose}>\n            <Modal.Header closeButton>\n                <Modal.Title>{data.title}</Modal.Title>\n            </Modal.Header>\n\n            <Modal.Body >\n                <ListGroup variant=\"flush\" className={styles.modalListGroup}>\n                    {data.action.payload.widget_list.map((item, i) => {\n                        let itemClass = item.data.has_divider ? styles.borderBottom : 'border-0'\n                        let textColor = item.data.text_color\n                        let textColorClass = 'text-dark'\n                        if (textColor === 'TEXT_PRIMARY') {\n                            textColorClass = ['text-primary', styles.textBold].join(' ')\n                        }\n                        if (item.widget_type === 'DESCRIPTION_ROW') {\n                            return <ListGroup.Item key={i} className={[itemClass, textColorClass, 'pt-0'].join(' ')}>\n                                <Row className=\"align-items-center\">\n                                    <Col sm={12} className=\"justify-content-start\">\n                                        <p>{item.data.text}</p>\n                                    </Col>\n                                </Row>\n                            </ListGroup.Item>\n\n                        } else if (item.widget_type === 'TITLE_ROW') {\n                            return <ListGroup.Item key={i} className={[itemClass, textColorClass].join(' ')}>\n                                <Row className=\"align-items-center\">\n                                    <Col sm={12} className=\"justify-content-start\">\n                                        <p>{item.data.text}</p>\n                                    </Col>\n                                </Row>\n                            </ListGroup.Item>\n                        } else if (item.widget_type === 'IMAGE_CAROUSEL_ROW') {\n                            itemClass = styles.borderBottom\n                            return <ListGroup.Item key={i} className={[itemClass, textColorClass].join(' ')}>\n                                <Row className=\"align-items-center\">\n                                    <Col sm={{ span: 6, offset: 6 }} className=\"justify-content-start\">\n                                        <Carousel indicators={false}>\n                                            {item.data.items.map(image => {\n                                                return <Carousel.Item key={`image${i}`}>\n                                                    <img\n                                                        className=\"d-block w-100\"\n                                                        src={image.image_url}\n                                                        alt=\"image\"\n                                                    />\n                                                </Carousel.Item>\n                                            })}\n                                        </Carousel>\n                                    </Col>\n\n                                </Row>\n                            </ListGroup.Item>\n                        } else if (item.widget_type === 'FEATURE_ROW') {\n                            return <ListGroup.Item key={i} className={[itemClass, textColorClass].join(' ')}>\n                                <Row className=\"align-items-center\">\n                                    <Col sm={12} className=\"justify-content-start\">\n                                        <img className={widgetStyles.widget_img} src={item.data.icon.image_url_light} alt={item.data.icon.icon_name} />\n                                        <a className={widgetStyles.paragraph}> {item.data.title}</a>\n                                    </Col>\n\n                                </Row>\n                            </ListGroup.Item>\n                        } else if (item.widget_type === 'SCORE_ROW') {\n                            return <ListGroup.Item action={item.data.action ? true : false} key={i} className={[itemClass, textColorClass].join(' ')}>\n                                {item.data.action ? <Link to={{\n                                    pathname: `${url}/${item.data.action.payload.slug}`,\n                                    state: { widgetData: item.data.action.payload.widget_list }\n                                }}\n                                    className={styles.linkItem}>\n                                    <Row className=\"align-items-center\">\n                                        <Col md={7} xs={6} className=\"justify-content-start\">\n                                            <img className={widgetStyles.widget_img} src={item.data.icon.image_url_light} alt={item.data.icon.icon_name} />\n                                            <a className={widgetStyles.paragraph}> {item.data.title}</a>\n                                        </Col>\n                                        <Col md={4} xs={4} className=\"justify-content-between\">\n                                            <p>{item.data.descriptive_score}</p>\n                                        </Col>\n                                        <Col md={1} xs={1}>\n                                            <FaAngleLeft />\n                                        </Col>\n                                    </Row>\n                                </Link>\n                                    :\n                                <Row className=\"align-items-center\" key={i}>\n                                    <Col xs={6} className=\"justify-content-start\">\n                                        <img className={widgetStyles.widget_img} src={item.data.icon.image_url_light} alt={item.data.icon.icon_name} />\n                                        <a className={widgetStyles.paragraph}> {item.data.title}</a>\n                                    </Col>\n                                    <Col xs={6} className=\"justify-content-between\">\n                                        <p>{item.data.descriptive_score}</p>\n                                    </Col>\n                                </Row>}\n                            </ListGroup.Item>\n                        }\n                        else {\n                            return <ListGroup.Item key={i} className={[itemClass, textColorClass].join(' ')}>\n                                <Row className=\"align-items-center\">\n                                    <Col sm={8} className=\"justify-content-start\">\n                                        <p>{item.data.title}</p>\n                                    </Col>\n                                </Row>\n                                {/* {item.data.has_divider ? <hr /> : null} */}\n                                {/* <p>{item.widget_type}</p> */}\n                            </ListGroup.Item>\n                        }\n                    })}\n                </ListGroup>\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"secondary\" onClick={handleClose}>بستن</Button>\n            </Modal.Footer>\n        </Modal>\n    )\n}\n\nWidgetModal.propTypes = {\n    data: PropTypes.object,\n    closeModal: PropTypes.func\n};\n\nexport default WidgetModal;",{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","severity":1,"message":"44","line":97,"column":27,"nodeType":"45","endLine":97,"endColumn":59},{"ruleId":"46","severity":1,"message":"47","line":23,"column":36,"nodeType":"48","messageId":"49","endLine":23,"endColumn":38},{"ruleId":"43","severity":1,"message":"44","line":45,"column":19,"nodeType":"45","endLine":45,"endColumn":51},{"ruleId":"50","severity":1,"message":"51","line":70,"column":53,"nodeType":"45","endLine":74,"endColumn":55},{"ruleId":"43","severity":1,"message":"44","line":87,"column":41,"nodeType":"45","endLine":87,"endColumn":79},{"ruleId":"43","severity":1,"message":"44","line":102,"column":45,"nodeType":"45","endLine":102,"endColumn":83},{"ruleId":"43","severity":1,"message":"44","line":116,"column":41,"nodeType":"45","endLine":116,"endColumn":79},"no-native-reassign",["52"],"no-negated-in-lhs",["53"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","no-global-assign","no-unsafe-negation"]